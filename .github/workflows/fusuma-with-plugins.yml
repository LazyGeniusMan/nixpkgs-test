name: "Fusuma - Plugins"
on:
  workflow_dispatch:
  
env:
  NIXPKGS_REPO: "LazyGeniusMan/nixpkgs"
  NIXPKGS_BRANCH: "master"
  NIXPKGS_NAME: "fusuma"
  NIXPKGS_VER_OLD: "1.3.0"
  NIXPKGS_VER_NEW: "2.4.1"
  NIXPKGS_DIR: "./pkgs/tools/inputmethods/fusuma"

jobs:
  fusuma-plugins:
    name: Fusuma - Plugins
    runs-on: ubuntu-latest
    steps:
    - name: Install Nix
      uses: cachix/install-nix-action@v17
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - name: Checkout
      uses: actions/checkout@v3.0.2
      with:
        repository: ${{ env.NIXPKGS_REPO }}
        ref: ${{ env.NIXPKGS_BRANCH }}
        token: ${{ secrets.PAT }}
        fetch-depth: 1
    - name: Remove old main package
      run: |
        rm -rf ${{ env.NIXPKGS_DIR }}
    - name: generate new main package
      run: |
        mkdir -p ${{ env.NIXPKGS_DIR }}/fusuma
        cd ${{ env.NIXPKGS_DIR }}
        cat <</EOF > default.nix
        { lib, bundlerApp, bundlerUpdateScript, makeWrapper, libinput }:

        bundlerApp {
          pname = "fusuma";
          gemdir = ./fusuma;
          exes = [ "fusuma" ];

          nativeBuildInputs = [ makeWrapper ];

          postBuild = ''
          wrapProgram "$out/bin/fusuma" \
            --prefix PATH : ${lib.makeBinPath [ libinput ]}
          '';

          passthru.updateScript = bundlerUpdateScript "fusuma";

          meta = with lib; {
            description = "Multitouch gestures with libinput driver on X11, Linux";
            homepage = "https://github.com/iberianpig/fusuma";
            license = licenses.mit;
            maintainers = with maintainers; [ jfrankenau nicknovitski Br1ght0ne ];
            platforms = platforms.linux;
          };
        }
        EOF
        cd fusuma
        cat <</EOF > Gemfile
        source 'https://rubygems.org'
        gem "fusuma"
        EOF
        nix-shell -p ruby bundix --run "bundler install"
        nix-shell -p ruby bundix --run "bundix -l"
    - name: Build Main Package
      run: |
        cd ${{ github.workspace }}
        nix-build -A ${{ env.NIXPKGS_NAME }}
    - name: Get result full path
      run: echo "NIXPKGS_RESULT=$(readlink result)" >> $GITHUB_ENV
    - name: Upload nixpkgs source
      uses: actions/upload-artifact@v3.1.0
      with:
        name: nixpkgs-source-${{ env.NIXPKGS_NAME }}-${{ env.NIXPKGS_VER_NEW }}-${{ github.run_id }}
        path: |
          ${{ env.NIXPKGS_DIR }}/**
    - name: Upload nixpkgs result
      uses: actions/upload-artifact@v3.1.0
      with:
        name: nixpkgs-result-${{ env.NIXPKGS_NAME }}-${{ env.NIXPKGS_VER_NEW }}-${{ github.run_id }}
        path: ${{ env.NIXPKGS_RESULT }}
    #- name: Commit to new branch
    #  uses: EndBug/add-and-commit@v9.1.0
    #  with:
    #    author_name: ${{ secrets.GIT_NAME }}
    #    author_email: ${{ secrets.GIT_EMAIL }}
    #    committer_name: ${{ secrets.GIT_NAME }}
    #    committer_email: ${{ secrets.GIT_EMAIL }}
    #    message: "${{ env.NIXPKGS_NAME }}: ${{ env.NIXPKGS_VER_OLD }} -> ${{ env.NIXPKGS_VER_NEW }}"
    #    new_branch: ${{ env.NIXPKGS_NAME }}-${{ env.NIXPKGS_VER_NEW }}-${{ github.run_id }}
    #    github_token: ${{ secrets.PAT }}
