name: "Fusuma With Plugins"
on:
  workflow_dispatch:
  
env:
  NIXPKGS_REPO: "LazyGeniusMan/nixpkgs"
  NIXPKGS_BRANCH: "master"
  NIXPKGS_NAME: "fusuma"
  NIXPKGS_VER_OLD: "1.3.0"
  NIXPKGS_VER_NEW: "2.4.1"
  NIXPKGS_DIR: "./pkgs/tools/inputmethods/fusuma"

jobs:
  fusuma-with-plugins:
    name: Fusuma With Plugins
    runs-on: ubuntu-latest
    steps:
    - name: Install Nix
      uses: cachix/install-nix-action@v17
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - name: Checkout
      uses: actions/checkout@v3.0.2
      with:
        repository: ${{ env.NIXPKGS_REPO }}
        ref: ${{ env.NIXPKGS_BRANCH }}
        token: ${{ secrets.PAT }}
        fetch-depth: 1
    - name: Remove old fusuma
      run: |
        rm -rf ${{ env.NIXPKGS_DIR }}
    - name: generate new fusuma gem
      run: |
        mkdir -p ${{ env.NIXPKGS_DIR }}/fusuma
        cd ${{ env.NIXPKGS_DIR }}
        cat <<\EOF > default.nix
        { lib, bundlerApp, bundlerUpdateScript, makeWrapper, libinput }:

        bundlerApp {
          pname = "fusuma";
          gemdir = ./fusuma;
          exes = [ "fusuma" ];

          nativeBuildInputs = [ makeWrapper ];

          postBuild = ''
          wrapProgram "$out/bin/fusuma" \
            --prefix PATH : ${lib.makeBinPath [ libinput ]}
          '';

          passthru.updateScript = bundlerUpdateScript "fusuma";

          meta = with lib; {
            description = "Multitouch gestures with libinput driver on X11, Linux";
            homepage = "https://github.com/iberianpig/fusuma";
            license = licenses.mit;
            maintainers = with maintainers; [ jfrankenau nicknovitski Br1ght0ne lazygeniusman ];
            platforms = platforms.linux;
          };
        }
        EOF
        cd fusuma
        cat <<\EOF > Gemfile
        source 'https://rubygems.org'
        gem 'fusuma'
        EOF
        nix-shell -p ruby bundix --run "bundler install"
        nix-shell -p ruby bundix --run "bundix -l"
        cd ${{ github.workspace }}
    - name: Build fusuma
      run: |
        nix-build -A ${{ env.NIXPKGS_NAME }}
    - name: Generate fusuma-plugin-appmatcher gem
      run: |
        mkdir -p ${{ env.NIXPKGS_DIR }}/fusuma-plugin-appmatcher
        cd ${{ env.NIXPKGS_DIR }}/fusuma-plugin-appmatcher
        cat <<\EOF > Gemfile
        source 'https://rubygems.org'
        gem 'fusuma-plugin-appmatcher'
        EOF
        nix-shell -p ruby bundix --run "bundler install"
        nix-shell -p ruby bundix --run "bundix -l"
        cd ${{ github.workspace }}
    - name: Generate fusuma-plugin-keypress gem
      run: |
        mkdir -p ${{ env.NIXPKGS_DIR }}/fusuma-plugin-keypress
        cd ${{ env.NIXPKGS_DIR }}/fusuma-plugin-keypress
        cat <<\EOF > Gemfile
        source 'https://rubygems.org'
        gem 'fusuma-plugin-keypress'
        EOF
        nix-shell -p ruby bundix --run "bundler install"
        nix-shell -p ruby bundix --run "bundix -l"
        cd ${{ github.workspace }}
    - name: Generate fusuma-plugin-sendkey gem
      run: |
        mkdir -p ${{ env.NIXPKGS_DIR }}/fusuma-plugin-sendkey
        cd ${{ env.NIXPKGS_DIR }}/fusuma-plugin-sendkey
        cat <<\EOF > Gemfile
        source 'https://rubygems.org'
        gem 'fusuma-plugin-sendkey'
        EOF
        nix-shell -p ruby bundix --run "bundler install"
        nix-shell -p ruby bundix --run "bundix -l"
        cd ${{ github.workspace }}
    - name: Generate fusuma-plugin-tap gem
      run: |
        mkdir -p ${{ env.NIXPKGS_DIR }}/fusuma-plugin-tap
        cd ${{ env.NIXPKGS_DIR }}/fusuma-plugin-tap
        cat <<\EOF > Gemfile
        source 'https://rubygems.org'
        gem 'fusuma-plugin-tap'
        EOF
        nix-shell -p ruby bundix --run "bundler install"
        nix-shell -p ruby bundix --run "bundix -l"
        cd ${{ github.workspace }}
    - name: Generate fusuma-plugin-wmctrl gem
      run: |
        mkdir -p ${{ env.NIXPKGS_DIR }}/fusuma-plugin-wmctrl
        cd ${{ env.NIXPKGS_DIR }}/fusuma-plugin-wmctrl
        cat <<\EOF > Gemfile
        source 'https://rubygems.org'
        gem 'fusuma-plugin-wmctrl'
        EOF
        nix-shell -p ruby bundix --run "bundler install"
        nix-shell -p ruby bundix --run "bundix -l"
        cd ${{ github.workspace }}
    - name: Generate plugins.nix
      run: |
        cd ${{ env.NIXPKGS_DIR }}
        cat <<\EOF > plugins.nix
        { lib, bundlerApp, bundlerUpdateScript, makeWrapper, fusuma, libinput }:
        {
          appmatcher = bundlerApp {
            pname = "fusuma-plugin-appmatcher";
            gemdir = ./fusuma-plugin-appmatcher;
            exes = [ "fusuma-appmatcher" ];
            
            nativeBuildInputs = [ makeWrapper ];
            
            postBuild = ''
            wrapProgram "$out/bin/fusuma-appmatcher" \
              --prefix PATH : ${lib.makeBinPath [ libinput fusuma ]}
              '';
              
            passthru.updateScript = bundlerUpdateScript "fusuma-plugin-appmatcher";
            
            meta = with lib; {
              description = "Configure app-specific gestures plugin for Fusuma";
              homepage = "https://github.com/iberianpig/fusuma-plugin-appmatcher";
              license = licenses.mit;
              maintainers = with maintainers; [ lazygeniusman ];
              platforms = platforms.linux;
            };
          };
          
          keypress = bundlerApp {
            pname = "fusuma-plugin-keypress";
            gemdir = ./fusuma-plugin-keypress;
            exes = [ "fusuma-keypress" ];
            
            nativeBuildInputs = [ makeWrapper ];
            
            postBuild = ''
            wrapProgram "$out/bin/fusuma-keypress" \
              --prefix PATH : ${lib.makeBinPath [ libinput fusuma ]}
            '';
            
            passthru.updateScript = bundlerUpdateScript "fusuma-plugin-keypress";
            
            meta = with lib; {
              description = "Keypress combination plugin for Fusuma";
              homepage = "https://github.com/iberianpig/fusuma-plugin-keypress";
              license = licenses.mit;
              maintainers = with maintainers; [ lazygeniusman ];
              platforms = platforms.linux;
            };
          };
          
          sendkey = bundlerApp {
            pname = "fusuma-plugin-sendkey";
            gemdir = ./fusuma-plugin-sendkey;
            exes = [ "fusuma-sendkey" ];
            
            nativeBuildInputs = [ makeWrapper ];
            
            postBuild = ''
            wrapProgram "$out/bin/fusuma-sendkey" \
              --prefix PATH : ${lib.makeBinPath [ libinput fusuma ]}
            '';
            
            passthru.updateScript = bundlerUpdateScript "fusuma-plugin-sendkey";
            
            meta = with lib; {
              description = "Send virtual keyboard events plugin for Fusuma";
              homepage = "https://github.com/iberianpig/fusuma-plugin-sendkey";
              license = licenses.mit;
              maintainers = with maintainers; [ lazygeniusman ];
              platforms = platforms.linux;
            };
          };
          
          tap = bundlerApp {
            pname = "fusuma-plugin-tap";
            gemdir = ./fusuma-plugin-tap;
            exes = [ "fusuma-tap" ];
            
            nativeBuildInputs = [ makeWrapper ];
            
            postBuild = ''
            wrapProgram "$out/bin/fusuma-tap" \
              --prefix PATH : ${lib.makeBinPath [ libinput fusuma ]}
            '';
            
            passthru.updateScript = bundlerUpdateScript "fusuma-plugin-tap";
            
            meta = with lib; {
              description = "Recognize multitouch tap plugin for Fusuma";
              homepage = "https://github.com/iberianpig/fusuma-plugin-tap";
              license = licenses.mit;
              maintainers = with maintainers; [ lazygeniusman ];
              platforms = platforms.linux;
            };
          };
          
          wmctrl = bundlerApp {
            pname = "fusuma-plugin-wmctrl";
            gemdir = ./fusuma-plugin-wmctrl;
            exes = [ "fusuma-wmctrl" ];
            
            nativeBuildInputs = [ makeWrapper ];
            
            postBuild = ''
            wrapProgram "$out/bin/fusuma-wmctrl" \
              --prefix PATH : ${lib.makeBinPath [ libinput fusuma ]}
            '';
            
            passthru.updateScript = bundlerUpdateScript "fusuma-plugin-wmctrl";
            
            meta = with lib; {
              description = "Window Manager plugin for Fusuma";
              homepage = "https://github.com/iberianpig/fusuma-plugin-wmctrl";
              license = licenses.mit;
              maintainers = with maintainers; [ lazygeniusman ];
              platforms = platforms.linux;
            };
          };
        }
        EOF
        cd ${{ github.workspace }}
    - name: Upload nixpkgs source
      uses: actions/upload-artifact@v3.1.0
      with:
        name: nixpkgs-source-${{ env.NIXPKGS_NAME }}-${{ env.NIXPKGS_VER_NEW }}-${{ github.run_id }}
        path: |
          ${{ env.NIXPKGS_DIR }}/**
    #- name: Build fusuma-plugin-appmatcher
    #  run: |
    #    nix-build -A fusuma-plugin-appmatcher
    #- name: Build fusuma-plugin-keypress
    #  run: |
    #    nix-build -A fusuma-plugin-keypress
    #- name: Build fusuma-plugin-sendkey
    #  run: |
    #    nix-build -A fusuma-plugin-sendkey
    #- name: Build fusuma-plugin-tap
    #  run: |
    #    nix-build -A fusuma-plugin-tap
    #- name: Build fusuma-plugin-wmctrl
    #  run: |
    #    nix-build -A fusuma-plugin-wmctrl
    - name: Get result full path
      run: echo "NIXPKGS_RESULT=$(readlink result)" >> $GITHUB_ENV
    - name: Upload nixpkgs result
      uses: actions/upload-artifact@v3.1.0
      with:
        name: nixpkgs-result-${{ env.NIXPKGS_NAME }}-${{ env.NIXPKGS_VER_NEW }}-${{ github.run_id }}
        path: ${{ env.NIXPKGS_RESULT }}
    - name: Commit to new branch
      uses: EndBug/add-and-commit@v9.1.0
      with:
        author_name: ${{ secrets.GIT_NAME }}
        author_email: ${{ secrets.GIT_EMAIL }}
        committer_name: ${{ secrets.GIT_NAME }}
        committer_email: ${{ secrets.GIT_EMAIL }}
        message: "${{ env.NIXPKGS_NAME }}: ${{ env.NIXPKGS_VER_OLD }} -> ${{ env.NIXPKGS_VER_NEW }}, fusumaPlugins: init"
        new_branch: ${{ env.NIXPKGS_NAME }}-${{ env.NIXPKGS_VER_NEW }}-with-plugins-${{ github.run_id }}
        github_token: ${{ secrets.PAT }}
